// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/13/2021 00:05:03"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Bcd
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Bcd_vlg_sample_tst(
	R_n,
	clk,
	rst,
	sampler_tx
);
input [7:0] R_n;
input  clk;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(R_n or clk or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Bcd_vlg_check_tst (
	d_0,
	d_1,
	test,
	sampler_rx
);
input [3:0] d_0;
input [3:0] d_1;
input [7:0] test;
input sampler_rx;

reg [3:0] d_0_expected;
reg [3:0] d_1_expected;
reg [7:0] test_expected;

reg [3:0] d_0_prev;
reg [3:0] d_1_prev;
reg [7:0] test_prev;

reg [3:0] d_0_expected_prev;
reg [3:0] d_1_expected_prev;
reg [7:0] test_expected_prev;

reg [3:0] last_d_0_exp;
reg [3:0] last_d_1_exp;
reg [7:0] last_test_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	d_0_prev = d_0;
	d_1_prev = d_1;
	test_prev = test;
end

// update expected /o prevs

always @(trigger)
begin
	d_0_expected_prev = d_0_expected;
	d_1_expected_prev = d_1_expected;
	test_expected_prev = test_expected;
end


// expected test[ 7 ]
initial
begin
	test_expected[7] = 1'bX;
end 
// expected test[ 6 ]
initial
begin
	test_expected[6] = 1'bX;
end 
// expected test[ 5 ]
initial
begin
	test_expected[5] = 1'bX;
end 
// expected test[ 4 ]
initial
begin
	test_expected[4] = 1'bX;
end 
// expected test[ 3 ]
initial
begin
	test_expected[3] = 1'bX;
end 
// expected test[ 2 ]
initial
begin
	test_expected[2] = 1'bX;
end 
// expected test[ 1 ]
initial
begin
	test_expected[1] = 1'bX;
end 
// expected test[ 0 ]
initial
begin
	test_expected[0] = 1'bX;
end 
// expected d_1[ 3 ]
initial
begin
	d_1_expected[3] = 1'bX;
end 
// expected d_1[ 2 ]
initial
begin
	d_1_expected[2] = 1'bX;
end 
// expected d_1[ 1 ]
initial
begin
	d_1_expected[1] = 1'bX;
end 
// expected d_1[ 0 ]
initial
begin
	d_1_expected[0] = 1'bX;
end 
// expected d_0[ 3 ]
initial
begin
	d_0_expected[3] = 1'bX;
end 
// expected d_0[ 2 ]
initial
begin
	d_0_expected[2] = 1'bX;
end 
// expected d_0[ 1 ]
initial
begin
	d_0_expected[1] = 1'bX;
end 
// expected d_0[ 0 ]
initial
begin
	d_0_expected[0] = 1'bX;
end 
// generate trigger
always @(d_0_expected or d_0 or d_1_expected or d_1 or test_expected or test)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected d_0 = %b | expected d_1 = %b | expected test = %b | ",d_0_expected_prev,d_1_expected_prev,test_expected_prev);
	$display("| real d_0 = %b | real d_1 = %b | real test = %b | ",d_0_prev,d_1_prev,test_prev);
`endif
	if (
		( d_0_expected_prev[0] !== 1'bx ) && ( d_0_prev[0] !== d_0_expected_prev[0] )
		&& ((d_0_expected_prev[0] !== last_d_0_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d_0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d_0_expected_prev);
		$display ("     Real value = %b", d_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_d_0_exp[0] = d_0_expected_prev[0];
	end
	if (
		( d_0_expected_prev[1] !== 1'bx ) && ( d_0_prev[1] !== d_0_expected_prev[1] )
		&& ((d_0_expected_prev[1] !== last_d_0_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d_0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d_0_expected_prev);
		$display ("     Real value = %b", d_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_d_0_exp[1] = d_0_expected_prev[1];
	end
	if (
		( d_0_expected_prev[2] !== 1'bx ) && ( d_0_prev[2] !== d_0_expected_prev[2] )
		&& ((d_0_expected_prev[2] !== last_d_0_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d_0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d_0_expected_prev);
		$display ("     Real value = %b", d_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_d_0_exp[2] = d_0_expected_prev[2];
	end
	if (
		( d_0_expected_prev[3] !== 1'bx ) && ( d_0_prev[3] !== d_0_expected_prev[3] )
		&& ((d_0_expected_prev[3] !== last_d_0_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d_0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d_0_expected_prev);
		$display ("     Real value = %b", d_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_d_0_exp[3] = d_0_expected_prev[3];
	end
	if (
		( d_1_expected_prev[0] !== 1'bx ) && ( d_1_prev[0] !== d_1_expected_prev[0] )
		&& ((d_1_expected_prev[0] !== last_d_1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d_1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d_1_expected_prev);
		$display ("     Real value = %b", d_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_d_1_exp[0] = d_1_expected_prev[0];
	end
	if (
		( d_1_expected_prev[1] !== 1'bx ) && ( d_1_prev[1] !== d_1_expected_prev[1] )
		&& ((d_1_expected_prev[1] !== last_d_1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d_1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d_1_expected_prev);
		$display ("     Real value = %b", d_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_d_1_exp[1] = d_1_expected_prev[1];
	end
	if (
		( d_1_expected_prev[2] !== 1'bx ) && ( d_1_prev[2] !== d_1_expected_prev[2] )
		&& ((d_1_expected_prev[2] !== last_d_1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d_1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d_1_expected_prev);
		$display ("     Real value = %b", d_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_d_1_exp[2] = d_1_expected_prev[2];
	end
	if (
		( d_1_expected_prev[3] !== 1'bx ) && ( d_1_prev[3] !== d_1_expected_prev[3] )
		&& ((d_1_expected_prev[3] !== last_d_1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d_1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d_1_expected_prev);
		$display ("     Real value = %b", d_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_d_1_exp[3] = d_1_expected_prev[3];
	end
	if (
		( test_expected_prev[0] !== 1'bx ) && ( test_prev[0] !== test_expected_prev[0] )
		&& ((test_expected_prev[0] !== last_test_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test_expected_prev);
		$display ("     Real value = %b", test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_test_exp[0] = test_expected_prev[0];
	end
	if (
		( test_expected_prev[1] !== 1'bx ) && ( test_prev[1] !== test_expected_prev[1] )
		&& ((test_expected_prev[1] !== last_test_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test_expected_prev);
		$display ("     Real value = %b", test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_test_exp[1] = test_expected_prev[1];
	end
	if (
		( test_expected_prev[2] !== 1'bx ) && ( test_prev[2] !== test_expected_prev[2] )
		&& ((test_expected_prev[2] !== last_test_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test_expected_prev);
		$display ("     Real value = %b", test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_test_exp[2] = test_expected_prev[2];
	end
	if (
		( test_expected_prev[3] !== 1'bx ) && ( test_prev[3] !== test_expected_prev[3] )
		&& ((test_expected_prev[3] !== last_test_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test_expected_prev);
		$display ("     Real value = %b", test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_test_exp[3] = test_expected_prev[3];
	end
	if (
		( test_expected_prev[4] !== 1'bx ) && ( test_prev[4] !== test_expected_prev[4] )
		&& ((test_expected_prev[4] !== last_test_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test_expected_prev);
		$display ("     Real value = %b", test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_test_exp[4] = test_expected_prev[4];
	end
	if (
		( test_expected_prev[5] !== 1'bx ) && ( test_prev[5] !== test_expected_prev[5] )
		&& ((test_expected_prev[5] !== last_test_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test_expected_prev);
		$display ("     Real value = %b", test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_test_exp[5] = test_expected_prev[5];
	end
	if (
		( test_expected_prev[6] !== 1'bx ) && ( test_prev[6] !== test_expected_prev[6] )
		&& ((test_expected_prev[6] !== last_test_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test_expected_prev);
		$display ("     Real value = %b", test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_test_exp[6] = test_expected_prev[6];
	end
	if (
		( test_expected_prev[7] !== 1'bx ) && ( test_prev[7] !== test_expected_prev[7] )
		&& ((test_expected_prev[7] !== last_test_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test_expected_prev);
		$display ("     Real value = %b", test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_test_exp[7] = test_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Bcd_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] R_n;
reg clk;
reg rst;
// wires                                               
wire [3:0] d_0;
wire [3:0] d_1;
wire [7:0] test;

wire sampler;                             

// assign statements (if any)                          
Bcd i1 (
// port map - connection between master ports and signals/registers   
	.R_n(R_n),
	.clk(clk),
	.d_0(d_0),
	.d_1(d_1),
	.rst(rst),
	.test(test)
);
// R_n[ 7 ]
initial
begin
	R_n[7] = 1'b0;
end 
// R_n[ 6 ]
initial
begin
	R_n[6] = 1'b0;
end 
// R_n[ 5 ]
initial
begin
	R_n[5] = 1'b0;
end 
// R_n[ 4 ]
initial
begin
	R_n[4] = 1'b0;
end 
// R_n[ 3 ]
initial
begin
	R_n[3] = 1'b0;
end 
// R_n[ 2 ]
initial
begin
	R_n[2] = 1'b0;
end 
// R_n[ 1 ]
initial
begin
	R_n[1] = 1'b0;
end 
// R_n[ 0 ]
initial
begin
	R_n[0] = 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 

// rst
initial
begin
	rst = 1'b0;
end 

Bcd_vlg_sample_tst tb_sample (
	.R_n(R_n),
	.clk(clk),
	.rst(rst),
	.sampler_tx(sampler)
);

Bcd_vlg_check_tst tb_out(
	.d_0(d_0),
	.d_1(d_1),
	.test(test),
	.sampler_rx(sampler)
);
endmodule

