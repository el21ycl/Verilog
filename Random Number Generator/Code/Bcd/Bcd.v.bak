module Bcd(
     input clk ,
	  input rst ,
	  input R_b ,
     output reg [3:0] d_0 = 4'd0 ; //The output is the single digit that needs to be displayed
     output reg [3:0] d_1 = 4'd0 ; //The output is the tens digit that needs to be displayed
  
) ;
    reg [7:0] bcd;                 //Binary to bcd
	 reg [3:0] count;               //Need to shift 8 times
	 reg [15:0] shift_reg;          
	
//Calculate the number of shift	
  always @ (posedge clk)
   begin
    if (rst)                  //If rst is active it will reset
	  count <= 4'd0;
	 else if (count == 4'd9)
	  count <= 4'd0;
	 else 
	  count <= count + 1'd1;
	end
	 
//Binary to Bcd
	always @ (posedge clk)
   begin
    if (rst)                  //If rst is active it will reset 
	  shift_reg <= 1'd0;
	 else if (count == 1'd0)
	  shift_reg = {8'b0000_0000,R_b};
	 else if (count <= 4'd9)
	  begin 
	   if(shift_reg[15:12]>=5) 
		 shift_reg[15:12]= shift_reg[15:12]+ 3;
		if(shift_reg[11:8]>=5) 
		 shift_reg[11:8]= shift_reg[11:8]+ 3;
		if(shift_reg[7:4]>=5) 
		 shift_reg[7:4]= shift_reg[7:4]+ 3;
		if(shift_reg[3:0]>=5) 
		 shift_reg[3:0]= shift_reg[3:0]+ 3;
		shift_reg = shift_reg << 1;
	  end
	end
	 
// Output assignment
  always @ (posedge clk)
   begin
    if (rst)                  //If rst is active it will reset 
	  bcd <= 1'd0;
    else if (count == 4'd9)
	 begin
	  bcd <= shift_reg[15:8];
	  d_0 <= bcd[11:8]
	  d_1 <= bcd[15:12]
	  




