// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/21/2020 22:19:30"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    control
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module control_vlg_sample_tst(
	Key_0,
	Key_2,
	clk,
	rst,
	sampler_tx
);
input  Key_0;
input  Key_2;
input  clk;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(Key_0 or Key_2 or clk or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module control_vlg_check_tst (
	hex4,
	hex5,
	sampler_rx
);
input [6:0] hex4;
input [6:0] hex5;
input sampler_rx;

reg [6:0] hex4_expected;
reg [6:0] hex5_expected;

reg [6:0] hex4_prev;
reg [6:0] hex5_prev;

reg [6:0] hex4_expected_prev;
reg [6:0] hex5_expected_prev;

reg [6:0] last_hex4_exp;
reg [6:0] last_hex5_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	hex4_prev = hex4;
	hex5_prev = hex5;
end

// update expected /o prevs

always @(trigger)
begin
	hex4_expected_prev = hex4_expected;
	hex5_expected_prev = hex5_expected;
end


// expected hex4[ 6 ]
initial
begin
	hex4_expected[6] = 1'bX;
end 
// expected hex4[ 5 ]
initial
begin
	hex4_expected[5] = 1'bX;
end 
// expected hex4[ 4 ]
initial
begin
	hex4_expected[4] = 1'bX;
end 
// expected hex4[ 3 ]
initial
begin
	hex4_expected[3] = 1'bX;
end 
// expected hex4[ 2 ]
initial
begin
	hex4_expected[2] = 1'bX;
end 
// expected hex4[ 1 ]
initial
begin
	hex4_expected[1] = 1'bX;
end 
// expected hex4[ 0 ]
initial
begin
	hex4_expected[0] = 1'bX;
end 
// expected hex5[ 6 ]
initial
begin
	hex5_expected[6] = 1'bX;
end 
// expected hex5[ 5 ]
initial
begin
	hex5_expected[5] = 1'bX;
end 
// expected hex5[ 4 ]
initial
begin
	hex5_expected[4] = 1'bX;
end 
// expected hex5[ 3 ]
initial
begin
	hex5_expected[3] = 1'bX;
end 
// expected hex5[ 2 ]
initial
begin
	hex5_expected[2] = 1'bX;
end 
// expected hex5[ 1 ]
initial
begin
	hex5_expected[1] = 1'bX;
end 
// expected hex5[ 0 ]
initial
begin
	hex5_expected[0] = 1'bX;
end 
// generate trigger
always @(hex4_expected or hex4 or hex5_expected or hex5)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected hex4 = %b | expected hex5 = %b | ",hex4_expected_prev,hex5_expected_prev);
	$display("| real hex4 = %b | real hex5 = %b | ",hex4_prev,hex5_prev);
`endif
	if (
		( hex4_expected_prev[0] !== 1'bx ) && ( hex4_prev[0] !== hex4_expected_prev[0] )
		&& ((hex4_expected_prev[0] !== last_hex4_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex4_expected_prev);
		$display ("     Real value = %b", hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_hex4_exp[0] = hex4_expected_prev[0];
	end
	if (
		( hex4_expected_prev[1] !== 1'bx ) && ( hex4_prev[1] !== hex4_expected_prev[1] )
		&& ((hex4_expected_prev[1] !== last_hex4_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex4_expected_prev);
		$display ("     Real value = %b", hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_hex4_exp[1] = hex4_expected_prev[1];
	end
	if (
		( hex4_expected_prev[2] !== 1'bx ) && ( hex4_prev[2] !== hex4_expected_prev[2] )
		&& ((hex4_expected_prev[2] !== last_hex4_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex4_expected_prev);
		$display ("     Real value = %b", hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_hex4_exp[2] = hex4_expected_prev[2];
	end
	if (
		( hex4_expected_prev[3] !== 1'bx ) && ( hex4_prev[3] !== hex4_expected_prev[3] )
		&& ((hex4_expected_prev[3] !== last_hex4_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex4_expected_prev);
		$display ("     Real value = %b", hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_hex4_exp[3] = hex4_expected_prev[3];
	end
	if (
		( hex4_expected_prev[4] !== 1'bx ) && ( hex4_prev[4] !== hex4_expected_prev[4] )
		&& ((hex4_expected_prev[4] !== last_hex4_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex4_expected_prev);
		$display ("     Real value = %b", hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_hex4_exp[4] = hex4_expected_prev[4];
	end
	if (
		( hex4_expected_prev[5] !== 1'bx ) && ( hex4_prev[5] !== hex4_expected_prev[5] )
		&& ((hex4_expected_prev[5] !== last_hex4_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex4_expected_prev);
		$display ("     Real value = %b", hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_hex4_exp[5] = hex4_expected_prev[5];
	end
	if (
		( hex4_expected_prev[6] !== 1'bx ) && ( hex4_prev[6] !== hex4_expected_prev[6] )
		&& ((hex4_expected_prev[6] !== last_hex4_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex4_expected_prev);
		$display ("     Real value = %b", hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_hex4_exp[6] = hex4_expected_prev[6];
	end
	if (
		( hex5_expected_prev[0] !== 1'bx ) && ( hex5_prev[0] !== hex5_expected_prev[0] )
		&& ((hex5_expected_prev[0] !== last_hex5_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex5[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex5_expected_prev);
		$display ("     Real value = %b", hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex5_exp[0] = hex5_expected_prev[0];
	end
	if (
		( hex5_expected_prev[1] !== 1'bx ) && ( hex5_prev[1] !== hex5_expected_prev[1] )
		&& ((hex5_expected_prev[1] !== last_hex5_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex5[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex5_expected_prev);
		$display ("     Real value = %b", hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex5_exp[1] = hex5_expected_prev[1];
	end
	if (
		( hex5_expected_prev[2] !== 1'bx ) && ( hex5_prev[2] !== hex5_expected_prev[2] )
		&& ((hex5_expected_prev[2] !== last_hex5_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex5[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex5_expected_prev);
		$display ("     Real value = %b", hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex5_exp[2] = hex5_expected_prev[2];
	end
	if (
		( hex5_expected_prev[3] !== 1'bx ) && ( hex5_prev[3] !== hex5_expected_prev[3] )
		&& ((hex5_expected_prev[3] !== last_hex5_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex5[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex5_expected_prev);
		$display ("     Real value = %b", hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex5_exp[3] = hex5_expected_prev[3];
	end
	if (
		( hex5_expected_prev[4] !== 1'bx ) && ( hex5_prev[4] !== hex5_expected_prev[4] )
		&& ((hex5_expected_prev[4] !== last_hex5_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex5[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex5_expected_prev);
		$display ("     Real value = %b", hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex5_exp[4] = hex5_expected_prev[4];
	end
	if (
		( hex5_expected_prev[5] !== 1'bx ) && ( hex5_prev[5] !== hex5_expected_prev[5] )
		&& ((hex5_expected_prev[5] !== last_hex5_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex5[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex5_expected_prev);
		$display ("     Real value = %b", hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex5_exp[5] = hex5_expected_prev[5];
	end
	if (
		( hex5_expected_prev[6] !== 1'bx ) && ( hex5_prev[6] !== hex5_expected_prev[6] )
		&& ((hex5_expected_prev[6] !== last_hex5_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex5[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex5_expected_prev);
		$display ("     Real value = %b", hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex5_exp[6] = hex5_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module control_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Key_0;
reg Key_2;
reg clk;
reg rst;
// wires                                               
wire [6:0] hex4;
wire [6:0] hex5;

wire sampler;                             

// assign statements (if any)                          
control i1 (
// port map - connection between master ports and signals/registers   
	.Key_0(Key_0),
	.Key_2(Key_2),
	.clk(clk),
	.hex4(hex4),
	.hex5(hex5),
	.rst(rst)
);

// Key_0
initial
begin
	Key_0 = 1'b0;
end 

// Key_2
initial
begin
	Key_2 = 1'b0;
	Key_2 = #80000 1'b1;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// rst
initial
begin
	rst = 1'b0;
end 

control_vlg_sample_tst tb_sample (
	.Key_0(Key_0),
	.Key_2(Key_2),
	.clk(clk),
	.rst(rst),
	.sampler_tx(sampler)
);

control_vlg_check_tst tb_out(
	.hex4(hex4),
	.hex5(hex5),
	.sampler_rx(sampler)
);
endmodule

